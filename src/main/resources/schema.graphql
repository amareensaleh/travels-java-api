type Query {
  """
  Route to find a trip by the orderNumber in the API
  
  Equivalent to GET /api-travels/v1/travels/byOrderNumber/{orderNumber}
  """
  findByOrderNumberUsingGET(
    """orderNumber"""
    orderNumber: String!

    """travels-api-version"""
    travelsApiVersion: String

    """X-api-key"""
    xApiKey: String
  ): ResponseListTravelDTO

  """
  Route to find a account by your id in the API
  
  Equivalent to GET /api-travels/v1/accounts/{id}
  """
  responseAccountDTO(
    """id"""
    id: BigInt!

    """travels-api-version"""
    travelsApiVersion: String

    """X-api-key"""
    xApiKey: String
  ): ResponseAccountDTO

  """
  Route to find account by the Account Number in the API
  
  Equivalent to GET /api-travels/v1/accounts/byAccountNumber/{number}
  """
  responseListAccountDTO(
    """number"""
    number: String!

    """travels-api-version"""
    travelsApiVersion: String

    """X-api-key"""
    xApiKey: String
  ): ResponseListAccountDTO

  """
  Route to find all travels of the API in a period of time
  
  Equivalent to GET /api-travels/v1/travels
  """
  responseListTravelDTO(
    """endDate"""
    endDate: String!
    offset: BigInt
    pageNumber: Int
    pageSize: Int
    paged: Boolean
    sortSorted: Boolean
    sortUnsorted: Boolean

    """startDate"""
    startDate: String!

    """travels-api-version"""
    travelsApiVersion: String
    unpaged: Boolean

    """X-api-key"""
    xApiKey: String
  ): ResponseListTravelDTO

  """
  Route to create statistics in the API
  
  Equivalent to GET /api-travels/v1/statistics
  """
  responseStatisticDTO(
    """travels-api-version"""
    travelsApiVersion: String

    """X-api-key"""
    xApiKey: String
  ): ResponseStatisticDTO

  """
  Route to find a trip by your id in the API
  
  Equivalent to GET /api-travels/v1/travels/{id}
  """
  responseTravelDTO(
    """fields"""
    fields: String

    """id"""
    id: BigInt!

    """travels-api-version"""
    travelsApiVersion: String

    """X-api-key"""
    xApiKey: String
  ): ResponseTravelDTO
}

type ResponseListTravelDTO {
  data: [TravelDTORes]
  errors: JSON
}

type TravelDTORes {
  accountId: BigInt!
  amount: Float!
  endDate: String
  id: BigInt
  links: Links2
  orderNumber: String!
  startDate: String!
  type: String!
}

"""
The `BigInt` scalar type represents non-fractional signed whole numeric values.
"""
scalar BigInt

type Links2 {
  empty: Boolean
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type ResponseAccountDTO {
  data: AccountDTORes
  errors: JSON
}

type AccountDTORes {
  accountNumber: String!
  accountType: String!
  id: BigInt
  links: Links2
}

type ResponseListAccountDTO {
  data: [AccountDTORes]
  errors: JSON
}

type ResponseStatisticDTO {
  data: StatisticDTO
  errors: JSON
}

type StatisticDTO {
  avg: Float!
  count: BigInt!
  id: BigInt
  links: Links2
  max: Float!
  min: Float!
  sum: Float!
}

type ResponseTravelDTO {
  data: TravelDTORes
  errors: JSON
}

type Mutation {
  """
  create
  
  Equivalent to POST /api-travels/v1/accounts
  """
  createUsingPOST(
    accountDTOReqInput: AccountDTOReqInput!

    """travels-api-version"""
    travelsApiVersion: String
  ): ResponseAccountDTO

  """
  Route to create travels
  
  Equivalent to POST /api-travels/v1/travels
  """
  createUsingPOST1(
    travelDTOReqInput: TravelDTOReqInput!

    """travels-api-version"""
    travelsApiVersion: String

    """X-api-key"""
    xApiKey: String
  ): ResponseTravelDTO

  """
  create
  
  Equivalent to POST /api-travels/v1/users-accounts
  """
  createUsingPOST2(
    """travels-api-version"""
    travelsApiVersion: String
    userAccountDTOReqInput: UserAccountDTOReqInput!
  ): ResponseUserAccountDTO

  """
  create
  
  Equivalent to POST /api-travels/v1/users
  """
  createUsingPOST3(
    """travels-api-version"""
    travelsApiVersion: String
    userDTOReqInput: UserDTOReqInput!
  ): ResponseUserDTO

  """
  Route to delete a trip in the API
  
  Equivalent to DELETE /api-travels/v1/travels/{id}
  """
  deleteUsingDELETE(
    """id"""
    id: BigInt!

    """travels-api-version"""
    travelsApiVersion: String

    """X-api-key"""
    xApiKey: String
  ): ResponseString

  """
  generateTokenJwt
  
  Equivalent to POST /api-travels/v1/auth
  """
  generateTokenJwtUsingPOST(
    jwtUserDTOInput: JwtUserDTOInput!

    """travels-api-version"""
    travelsApiVersion: String
  ): ResponseTokenDTO

  """
  Route to update a trip
  
  Equivalent to PUT /api-travels/v1/travels/{id}
  """
  updateUsingPUT(
    travelDTOReqInput: TravelDTOReqInput!

    """travels-api-version"""
    travelsApiVersion: String

    """X-api-key"""
    xApiKey: String
  ): ResponseTravelDTO
}

input AccountDTOReqInput {
  accountNumber: String!
  accountType: String!
  id: BigInt
  links: [LinkInput]
}

input LinkInput {
  deprecation: String
  href: String
  hreflang: String
  media: String
  name: String
  profile: String
  rel: JSON
  title: String
  type: String
}

input TravelDTOReqInput {
  accountId: BigInt!
  amount: Float!
  endDate: String
  id: BigInt
  links: [LinkInput]
  orderNumber: String!
  startDate: String!
  type: String!
}

type ResponseUserAccountDTO {
  data: UserAccountDTORes
  errors: JSON
}

type UserAccountDTORes {
  accountId: BigInt!
  id: BigInt
  links: Links2
  userId: BigInt!
}

input UserAccountDTOReqInput {
  accountId: BigInt!
  id: BigInt
  links: [LinkInput]
  userId: BigInt!
}

type ResponseUserDTO {
  data: UserDTORes
  errors: JSON
}

type UserDTORes {
  email: String
  id: BigInt
  links: Links2
  name: String!
  password: String!
  role: String!
}

input UserDTOReqInput {
  email: String
  id: BigInt
  links: [LinkInput]
  name: String!
  password: String!
  role: String!
}

type ResponseString {
  data: String
  errors: JSON
}

type ResponseTokenDTO {
  data: TokenDTO
  errors: JSON
}

type TokenDTO {
  token: String
}

input JwtUserDTOInput {
  email: String!
  password: String!
}